import json

from grpclib.reflection.service import ServerReflection
from grpclib.server import Server
from grpclib.utils import graceful_exit

# This entrypoint file is autogenerated from a proto file
from entrypoint import Entrypoint
from kre_runner import Runner
from config import Config


class EntrypointRunner(Runner):
    def __init__(self, host: str = '0.0.0.0', port: int = 9000):
        Runner.__init__(self, self.runner_name, Config())
        self.host = host
        self.port = port
        self.entrypoint = None

    async def start(self):
        """
        Entrypoint runner main loop. It will start the gRPC server and NATS subscription.
        """
        with open(self.config.nats_subjects_file) as json_file:
            subjects = json.load(json_file)
            self.logger.info(f"Loaded NATS subject file: {subjects}")

        self.logger.info(f"Creating entrypoint service")
        self.entrypoint = Entrypoint(self.logger, subjects, self.config)

        # starts the grpc server
        await self.run_grpc_server(self.entrypoint)

        # starts the entrypoint service
        await self.entrypoint.start()

    async def stop(self):
        self.entrypoint.stop()
        
        self.logger.info("stop loop")
        self.loop.stop()

    async def run_grpc_server(self, entrypoint):
        services = ServerReflection.extend([entrypoint])

        server = Server(services)
        with graceful_exit([server]):
            await server.start(self.host, self.port)
            self.logger.info(f'Serving gPRC server on {self.host}:{self.port}')
            await server.wait_closed()


if __name__ == '__main__':
    runner = EntrypointRunner()
    runner.run()
